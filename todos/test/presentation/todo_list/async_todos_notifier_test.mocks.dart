// Mocks generated by Mockito 5.4.5 from annotations
// in todos/test/presentation/todo_list/async_todos_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todos/core/error/failures.dart' as _i6;
import 'package:todos/domain/model/todo_model.dart' as _i7;
import 'package:todos/domain/usecase/index.dart' as _i4;

import 'async_todos_notifier_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ValueChangeListener].
///
/// See the documentation for Mockito's code generation for more information.
class MockValueChangeListener extends _i1.Mock
    implements _i3.ValueChangeListener {}

/// A class which mocks [GetTodosUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodosUseCase extends _i1.Mock implements _i4.GetTodosUseCase {
  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.TodoModel>>> call(
          {bool? isFinished}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#isFinished: isFinished},
        ),
        returnValue:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.TodoModel>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.TodoModel>>(
          this,
          Invocation.method(
            #call,
            [],
            {#isFinished: isFinished},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, List<_i7.TodoModel>>>.value(
                _FakeEither_0<_i6.Failure, List<_i7.TodoModel>>(
          this,
          Invocation.method(
            #call,
            [],
            {#isFinished: isFinished},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.TodoModel>>>);
}

/// A class which mocks [AddNewTotoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNewTotoUseCase extends _i1.Mock implements _i4.AddNewTotoUseCase {
  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> call(
          {required _i7.TodoModel? todoModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#todoModel: todoModel},
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#todoModel: todoModel},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
                _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#todoModel: todoModel},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}

/// A class which mocks [RemoveTodoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveTodoUseCase extends _i1.Mock implements _i4.RemoveTodoUseCase {
  @override
  _i5.Future<_i2.Either<_i6.Failure, bool>> call(
          {required _i7.TodoModel? todoModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#todoModel: todoModel},
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
            _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#todoModel: todoModel},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.Either<_i6.Failure, bool>>.value(
                _FakeEither_0<_i6.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
            {#todoModel: todoModel},
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, bool>>);
}
