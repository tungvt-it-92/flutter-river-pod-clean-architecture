// Mocks generated by Mockito 5.4.4 from annotations
// in todos/test/data/local/todo_dao_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:objectbox/src/store.dart' as _i8;
import 'package:todos/data/local/todo_dao.dart' as _i5;
import 'package:todos/domain/model/todo_model.dart' as _i4;
import 'package:todos/objectbox.g.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStore_0 extends _i1.SmartFake implements _i2.Store {
  _FakeStore_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_1<T1> extends _i1.SmartFake implements _i2.Box<T1> {
  _FakeBox_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_2<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTodoModel_3 extends _i1.SmartFake implements _i4.TodoModel {
  _FakeTodoModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryBuilder_4<T> extends _i1.SmartFake
    implements _i2.QueryBuilder<T> {
  _FakeQueryBuilder_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQuery_5<T> extends _i1.SmartFake implements _i2.Query<T> {
  _FakeQuery_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePropertyQuery_6<T> extends _i1.SmartFake
    implements _i2.PropertyQuery<T> {
  _FakePropertyQuery_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StoreProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreProvider extends _i1.Mock implements _i5.StoreProvider {
  @override
  set store(_i2.Store? _store) => super.noSuchMethod(
        Invocation.setter(
          #store,
          _store,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i2.Store> getStore() => (super.noSuchMethod(
        Invocation.method(
          #getStore,
          [],
        ),
        returnValue: _i3.Future<_i2.Store>.value(_FakeStore_0(
          this,
          Invocation.method(
            #getStore,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<_i2.Store>.value(_FakeStore_0(
          this,
          Invocation.method(
            #getStore,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Store>);
}

/// A class which mocks [Store].
///
/// See the documentation for Mockito's code generation for more information.
class MockStore extends _i1.Mock implements _i2.Store {
  @override
  String get directoryPath => (super.noSuchMethod(
        Invocation.getter(#directoryPath),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#directoryPath),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.getter(#directoryPath),
        ),
      ) as String);

  @override
  _i7.ByteData get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _i7.ByteData(0),
        returnValueForMissingStub: _i7.ByteData(0),
      ) as _i7.ByteData);

  @override
  bool isClosed() => (super.noSuchMethod(
        Invocation.method(
          #isClosed,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Box<T> box<T>() => (super.noSuchMethod(
        Invocation.method(
          #box,
          [],
        ),
        returnValue: _FakeBox_1<T>(
          this,
          Invocation.method(
            #box,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeBox_1<T>(
          this,
          Invocation.method(
            #box,
            [],
          ),
        ),
      ) as _i2.Box<T>);

  @override
  R runInTransaction<R>(
    _i2.TxMode? mode,
    R Function()? fn,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #runInTransaction,
          [
            mode,
            fn,
          ],
        ),
        returnValue: _i6.dummyValue<R>(
          this,
          Invocation.method(
            #runInTransaction,
            [
              mode,
              fn,
            ],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<R>(
          this,
          Invocation.method(
            #runInTransaction,
            [
              mode,
              fn,
            ],
          ),
        ),
      ) as R);

  @override
  _i3.Future<R> runInTransactionAsync<R, P>(
    _i2.TxMode? mode,
    _i8.TxAsyncCallback<R, P>? callback,
    P? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #runInTransactionAsync,
          [
            mode,
            callback,
            param,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #runInTransactionAsync,
                  [
                    mode,
                    callback,
                    param,
                  ],
                ),
              ),
              (R v) => _i3.Future<R>.value(v),
            ) ??
            _FakeFuture_2<R>(
              this,
              Invocation.method(
                #runInTransactionAsync,
                [
                  mode,
                  callback,
                  param,
                ],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #runInTransactionAsync,
                  [
                    mode,
                    callback,
                    param,
                  ],
                ),
              ),
              (R v) => _i3.Future<R>.value(v),
            ) ??
            _FakeFuture_2<R>(
              this,
              Invocation.method(
                #runInTransactionAsync,
                [
                  mode,
                  callback,
                  param,
                ],
              ),
            ),
      ) as _i3.Future<R>);

  @override
  _i3.Future<R> runAsync<P, R>(
    _i8.RunAsyncCallback<P, R>? callback,
    P? param,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #runAsync,
          [
            callback,
            param,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #runAsync,
                  [
                    callback,
                    param,
                  ],
                ),
              ),
              (R v) => _i3.Future<R>.value(v),
            ) ??
            _FakeFuture_2<R>(
              this,
              Invocation.method(
                #runAsync,
                [
                  callback,
                  param,
                ],
              ),
            ),
        returnValueForMissingStub: _i6.ifNotNull(
              _i6.dummyValueOrNull<R>(
                this,
                Invocation.method(
                  #runAsync,
                  [
                    callback,
                    param,
                  ],
                ),
              ),
              (R v) => _i3.Future<R>.value(v),
            ) ??
            _FakeFuture_2<R>(
              this,
              Invocation.method(
                #runAsync,
                [
                  callback,
                  param,
                ],
              ),
            ),
      ) as _i3.Future<R>);

  @override
  bool awaitQueueCompletion() => (super.noSuchMethod(
        Invocation.method(
          #awaitQueueCompletion,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool awaitQueueSubmitted() => (super.noSuchMethod(
        Invocation.method(
          #awaitQueueSubmitted,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox extends _i1.Mock implements _i2.Box<_i4.TodoModel> {
  @override
  int put(
    _i4.TodoModel? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<int> putAsync(
    _i4.TodoModel? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<_i4.TodoModel> putAndGetAsync(
    _i4.TodoModel? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetAsync,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<_i4.TodoModel>.value(_FakeTodoModel_3(
          this,
          Invocation.method(
            #putAndGetAsync,
            [object],
            {#mode: mode},
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<_i4.TodoModel>.value(_FakeTodoModel_3(
          this,
          Invocation.method(
            #putAndGetAsync,
            [object],
            {#mode: mode},
          ),
        )),
      ) as _i3.Future<_i4.TodoModel>);

  @override
  _i3.Future<int> putQueuedAwaitResult(
    _i4.TodoModel? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueuedAwaitResult,
          [object],
          {#mode: mode},
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int putQueued(
    _i4.TodoModel? object, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putQueued,
          [object],
          {#mode: mode},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  List<int> putMany(
    List<_i4.TodoModel>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putMany,
          [objects],
          {#mode: mode},
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  _i3.Future<List<int>> putManyAsync(
    List<_i4.TodoModel>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<_i4.TodoModel>> putAndGetManyAsync(
    List<_i4.TodoModel>? objects, {
    _i2.PutMode? mode = _i2.PutMode.put,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putAndGetManyAsync,
          [objects],
          {#mode: mode},
        ),
        returnValue: _i3.Future<List<_i4.TodoModel>>.value(<_i4.TodoModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.TodoModel>>.value(<_i4.TodoModel>[]),
      ) as _i3.Future<List<_i4.TodoModel>>);

  @override
  _i4.TodoModel? get(int? id) => (super.noSuchMethod(
        Invocation.method(
          #get,
          [id],
        ),
        returnValueForMissingStub: null,
      ) as _i4.TodoModel?);

  @override
  _i3.Future<_i4.TodoModel?> getAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getAsync,
          [id],
        ),
        returnValue: _i3.Future<_i4.TodoModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.TodoModel?>.value(),
      ) as _i3.Future<_i4.TodoModel?>);

  @override
  List<_i4.TodoModel?> getMany(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMany,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: <_i4.TodoModel?>[],
        returnValueForMissingStub: <_i4.TodoModel?>[],
      ) as List<_i4.TodoModel?>);

  @override
  _i3.Future<List<_i4.TodoModel?>> getManyAsync(
    List<int>? ids, {
    bool? growableResult = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManyAsync,
          [ids],
          {#growableResult: growableResult},
        ),
        returnValue: _i3.Future<List<_i4.TodoModel?>>.value(<_i4.TodoModel?>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.TodoModel?>>.value(<_i4.TodoModel?>[]),
      ) as _i3.Future<List<_i4.TodoModel?>>);

  @override
  List<_i4.TodoModel> getAll() => (super.noSuchMethod(
        Invocation.method(
          #getAll,
          [],
        ),
        returnValue: <_i4.TodoModel>[],
        returnValueForMissingStub: <_i4.TodoModel>[],
      ) as List<_i4.TodoModel>);

  @override
  _i3.Future<List<_i4.TodoModel>> getAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #getAllAsync,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TodoModel>>.value(<_i4.TodoModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.TodoModel>>.value(<_i4.TodoModel>[]),
      ) as _i3.Future<List<_i4.TodoModel>>);

  @override
  _i2.QueryBuilder<_i4.TodoModel> query([_i2.Condition<_i4.TodoModel>? qc]) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [qc],
        ),
        returnValue: _FakeQueryBuilder_4<_i4.TodoModel>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
        returnValueForMissingStub: _FakeQueryBuilder_4<_i4.TodoModel>(
          this,
          Invocation.method(
            #query,
            [qc],
          ),
        ),
      ) as _i2.QueryBuilder<_i4.TodoModel>);

  @override
  int count({int? limit = 0}) => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
          {#limit: limit},
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  bool isEmpty() => (super.noSuchMethod(
        Invocation.method(
          #isEmpty,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool contains(int? id) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool containsMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #containsMany,
          [ids],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i3.Future<bool> removeAsync(int? id) => (super.noSuchMethod(
        Invocation.method(
          #removeAsync,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  int removeMany(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeMany,
          [ids],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<int> removeManyAsync(List<int>? ids) => (super.noSuchMethod(
        Invocation.method(
          #removeManyAsync,
          [ids],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  int removeAll() => (super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<int> removeAllAsync() => (super.noSuchMethod(
        Invocation.method(
          #removeAllAsync,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}

/// A class which mocks [QueryBuilder].
///
/// See the documentation for Mockito's code generation for more information.
class MockQueryBuilder extends _i1.Mock
    implements _i2.QueryBuilder<_i4.TodoModel> {
  @override
  _i2.Query<_i4.TodoModel> build() => (super.noSuchMethod(
        Invocation.method(
          #build,
          [],
        ),
        returnValue: _FakeQuery_5<_i4.TodoModel>(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeQuery_5<_i4.TodoModel>(
          this,
          Invocation.method(
            #build,
            [],
          ),
        ),
      ) as _i2.Query<_i4.TodoModel>);

  @override
  _i3.Stream<_i2.Query<_i4.TodoModel>> watch(
          {bool? triggerImmediately = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {#triggerImmediately: triggerImmediately},
        ),
        returnValue: _i3.Stream<_i2.Query<_i4.TodoModel>>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.Query<_i4.TodoModel>>.empty(),
      ) as _i3.Stream<_i2.Query<_i4.TodoModel>>);

  @override
  _i2.QueryBuilder<_i4.TodoModel> order<D>(
    _i2.QueryProperty<_i4.TodoModel, D>? p, {
    int? flags = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #order,
          [p],
          {#flags: flags},
        ),
        returnValue: _FakeQueryBuilder_4<_i4.TodoModel>(
          this,
          Invocation.method(
            #order,
            [p],
            {#flags: flags},
          ),
        ),
        returnValueForMissingStub: _FakeQueryBuilder_4<_i4.TodoModel>(
          this,
          Invocation.method(
            #order,
            [p],
            {#flags: flags},
          ),
        ),
      ) as _i2.QueryBuilder<_i4.TodoModel>);

  @override
  link<TargetEntityT>(
    _i2.QueryRelationToOne<_i4.TodoModel, TargetEntityT>? rel, [
    _i2.Condition<TargetEntityT>? qc,
  ]) =>
      throw UnsupportedError(
          r'"link" cannot be used without a mockito fallback generator.');

  @override
  backlink<SourceEntityT>(
    _i2.QueryRelationToOne<SourceEntityT, _i4.TodoModel>? rel, [
    _i2.Condition<SourceEntityT>? qc,
  ]) =>
      throw UnsupportedError(
          r'"backlink" cannot be used without a mockito fallback generator.');

  @override
  linkMany<TargetEntityT>(
    _i2.QueryRelationToMany<_i4.TodoModel, TargetEntityT>? rel, [
    _i2.Condition<TargetEntityT>? qc,
  ]) =>
      throw UnsupportedError(
          r'"linkMany" cannot be used without a mockito fallback generator.');

  @override
  backlinkMany<SourceEntityT>(
    _i2.QueryRelationToMany<SourceEntityT, _i4.TodoModel>? rel, [
    _i2.Condition<SourceEntityT>? qc,
  ]) =>
      throw UnsupportedError(
          r'"backlinkMany" cannot be used without a mockito fallback generator.');
}

/// A class which mocks [Query].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuery extends _i1.Mock implements _i2.Query<_i4.TodoModel> {
  @override
  int get entityId => (super.noSuchMethod(
        Invocation.getter(#entityId),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  set offset(int? offset) => super.noSuchMethod(
        Invocation.setter(
          #offset,
          offset,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set limit(int? limit) => super.noSuchMethod(
        Invocation.setter(
          #limit,
          limit,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int count() => (super.noSuchMethod(
        Invocation.method(
          #count,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int remove() => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [],
        ),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  _i3.Future<int> removeAsync() => (super.noSuchMethod(
        Invocation.method(
          #removeAsync,
          [],
        ),
        returnValue: _i3.Future<int>.value(0),
        returnValueForMissingStub: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<_i4.TodoModel?> findFirstAsync() => (super.noSuchMethod(
        Invocation.method(
          #findFirstAsync,
          [],
        ),
        returnValue: _i3.Future<_i4.TodoModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.TodoModel?>.value(),
      ) as _i3.Future<_i4.TodoModel?>);

  @override
  _i3.Future<_i4.TodoModel?> findUniqueAsync() => (super.noSuchMethod(
        Invocation.method(
          #findUniqueAsync,
          [],
        ),
        returnValue: _i3.Future<_i4.TodoModel?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.TodoModel?>.value(),
      ) as _i3.Future<_i4.TodoModel?>);

  @override
  List<int> findIds() => (super.noSuchMethod(
        Invocation.method(
          #findIds,
          [],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);

  @override
  _i3.Future<List<int>> findIdsAsync() => (super.noSuchMethod(
        Invocation.method(
          #findIdsAsync,
          [],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
        returnValueForMissingStub: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  List<_i4.TodoModel> find() => (super.noSuchMethod(
        Invocation.method(
          #find,
          [],
        ),
        returnValue: <_i4.TodoModel>[],
        returnValueForMissingStub: <_i4.TodoModel>[],
      ) as List<_i4.TodoModel>);

  @override
  _i3.Future<List<_i4.TodoModel>> findAsync() => (super.noSuchMethod(
        Invocation.method(
          #findAsync,
          [],
        ),
        returnValue: _i3.Future<List<_i4.TodoModel>>.value(<_i4.TodoModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.TodoModel>>.value(<_i4.TodoModel>[]),
      ) as _i3.Future<List<_i4.TodoModel>>);

  @override
  List<_i2.IdWithScore> findIdsWithScores() => (super.noSuchMethod(
        Invocation.method(
          #findIdsWithScores,
          [],
        ),
        returnValue: <_i2.IdWithScore>[],
        returnValueForMissingStub: <_i2.IdWithScore>[],
      ) as List<_i2.IdWithScore>);

  @override
  _i3.Future<List<_i2.IdWithScore>> findIdsWithScoresAsync() =>
      (super.noSuchMethod(
        Invocation.method(
          #findIdsWithScoresAsync,
          [],
        ),
        returnValue:
            _i3.Future<List<_i2.IdWithScore>>.value(<_i2.IdWithScore>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.IdWithScore>>.value(<_i2.IdWithScore>[]),
      ) as _i3.Future<List<_i2.IdWithScore>>);

  @override
  List<_i2.ObjectWithScore<_i4.TodoModel>> findWithScores() =>
      (super.noSuchMethod(
        Invocation.method(
          #findWithScores,
          [],
        ),
        returnValue: <_i2.ObjectWithScore<_i4.TodoModel>>[],
        returnValueForMissingStub: <_i2.ObjectWithScore<_i4.TodoModel>>[],
      ) as List<_i2.ObjectWithScore<_i4.TodoModel>>);

  @override
  _i3.Future<List<_i2.ObjectWithScore<_i4.TodoModel>>> findWithScoresAsync() =>
      (super.noSuchMethod(
        Invocation.method(
          #findWithScoresAsync,
          [],
        ),
        returnValue: _i3.Future<List<_i2.ObjectWithScore<_i4.TodoModel>>>.value(
            <_i2.ObjectWithScore<_i4.TodoModel>>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i2.ObjectWithScore<_i4.TodoModel>>>.value(
                <_i2.ObjectWithScore<_i4.TodoModel>>[]),
      ) as _i3.Future<List<_i2.ObjectWithScore<_i4.TodoModel>>>);

  @override
  _i3.Stream<_i4.TodoModel> stream() => (super.noSuchMethod(
        Invocation.method(
          #stream,
          [],
        ),
        returnValue: _i3.Stream<_i4.TodoModel>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.TodoModel>.empty(),
      ) as _i3.Stream<_i4.TodoModel>);

  @override
  String describe() => (super.noSuchMethod(
        Invocation.method(
          #describe,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describe,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describe,
            [],
          ),
        ),
      ) as String);

  @override
  String describeParameters() => (super.noSuchMethod(
        Invocation.method(
          #describeParameters,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describeParameters,
            [],
          ),
        ),
        returnValueForMissingStub: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #describeParameters,
            [],
          ),
        ),
      ) as String);

  @override
  _i2.PropertyQuery<DartType> property<DartType>(
          _i2.QueryProperty<_i4.TodoModel, DartType>? prop) =>
      (super.noSuchMethod(
        Invocation.method(
          #property,
          [prop],
        ),
        returnValue: _FakePropertyQuery_6<DartType>(
          this,
          Invocation.method(
            #property,
            [prop],
          ),
        ),
        returnValueForMissingStub: _FakePropertyQuery_6<DartType>(
          this,
          Invocation.method(
            #property,
            [prop],
          ),
        ),
      ) as _i2.PropertyQuery<DartType>);
}
